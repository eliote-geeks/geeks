<?php

namespace App\Http\Controllers;
use Closure;
use Exception;
use Carbon\Carbon;
//use PayPal\Rest\ApiContext;

use App\Models\Plan;
use App\Models\User;
use App\Models\Order;
use App\Models\Course;
use App\Models\YahooMail;
use App\Models\AdminPayout;
use App\Models\Subscription;
use Illuminate\Http\Request;
use PayPal\Api\RedirectUrls;
use App\Models\PaypalProduct;
use App\Models\InstructorPayout;
use App\Models\FrequentlyQuestion;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Http;
use PayPal\Auth\OAuthTokenCredential;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Redirect;
    use Illuminate\Support\Facades\Input;
    use PayPal\Api\Amount;
    use PayPal\Api\Details;
    use PayPal\Api\Item;

    /** All Paypal Details class **/
    use PayPal\Api\ItemList;
    use PayPal\Api\Payer;
    use PayPal\Api\Payment;
    use PayPal\Api\PaymentExecution;
//    use PayPal\Api\RedirectUrls;
    use PayPal\Api\Transaction;
  //  use PayPal\Auth\OAuthTokenCredential;
    use PayPal\Rest\ApiContext;
  //  use Redirect;
    //use Session;
    //use URL;
    

class SubscriptionController extends Controller
{

    public function __construct()
    {
        /** PayPal api context **/
        $paypal_conf = \Config::get('paypal');
        $this->_api_context = new ApiContext(new OAuthTokenCredential(
            $paypal_conf['client_id'],
            $paypal_conf['secret'])
        );
        $this->_api_context->setConfig($paypal_conf['settings']);   
    }

    public static function tokenAccess()
    {
      $paypal_conf = \Config::get('paypal');
      $ch = curl_init();
      $client = $paypal_conf['client_id'];
      $secret = $paypal_conf['secret'];

      // whereIn(Coulumn_name, Array);

      curl_setopt($ch, CURLOPT_URL, "https://api.sandbox.paypal.com/v1/oauth2/token");      
      curl_setopt($ch, CURLOPT_HEADER, false);
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
      curl_setopt($ch, CURLOPT_SSLVERSION , 6); //NEW ADDITION
      curl_setopt($ch, CURLOPT_POST, true);
      curl_setopt($ch, CURLOPT_SSLVERSION , 6); 
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
      curl_setopt($ch, CURLOPT_USERPWD, $client.":".$secret);
      curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
      $result = curl_exec($ch);

      if(empty($result))
          dd('error');
      else{
          $json = json_decode($result);
          $accessToken = $json->access_token;        
      }
      curl_close($ch);
      return $json->access_token;
    }

    public function createProduct()
    {
      $request_Paypal = md5(uniqid());
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
      $ch = curl_init();

      curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/catalogs/products');
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"name\": \"Video Streaming Service\",\n  \"description\": \"A video streaming service\",\n  \"type\": \"SERVICE\",\n  \"category\": \"SOFTWARE\",\n  \"image_url\": \"https://example.com/streaming.jpg\",\n  \"home_url\": \"https://example.com/home\"\n}");

      $headers = array();
      $headers[] = 'Content-Type: application/json';
      $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
      $headers[] = 'Paypal-Request-Id: '.$request_Paypal;
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

      $result = curl_exec($ch);
      if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
      }
      curl_close($ch);
      $response = json_decode($result);
      $product = new PaypalProduct();
      $product->product_id = $response->id;
      $product->name = $response->name;
      $product->description = $response->description;
      $product->links1 = $response->links[0]->href;
      $product->links2 = $response->links[1]->href;
      $product->save();      
      return redirect()->back()->with('message','Product create successfully!!');      
  }

  public function createPlanMonth()
  {
    if(PaypalProduct::count() > 0)
    {
      $prod  = PaypalProduct::first()->product_id;    
    }
    else{
      $this->createProduct();
      $prod  = PaypalProduct::first()->product_id;    
    }
    
    
    $request_Paypal = md5(uniqid());
   // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"name\": \"Premium Course Plus\",\n    \"description\": \"A premium plan with courses feature\",\n    \"product_id\": \"$prod\",\n    \"billing_cycles\": [{\n        \"frequency\": {\n            \"interval_unit\": \"MONTH\",\n            \"interval_count\": 1\n        },\n        \"tenure_type\": \"REGULAR\",\n        \"sequence\": 1,\n        \"total_cycles\": 0,\n        \"pricing_scheme\": {\n            \"fixed_price\": {\n                \"value\": \"15\",\n                \"currency_code\": \"USD\"\n            }\n        }\n    }],\n    \"payment_preferences\": {\n        \"auto_bill_outstanding\": true,\n        \"payment_failure_threshold\": 1\n    }\n  }");

    $headers = array();
    $headers[] = 'Accept: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Paypal-Request-Id: PLAN-'.$request_Paypal;
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    $response = json_decode($result);
    $plan = new Plan();
    $plan->plan_id = $response->id;
    $plan->product_id = $response->product_id;
    $plan->name = $response->name;
    $plan->status = $response->status;
    $plan->description = $response->description;
    $plan->usage_type = $response->usage_type;
    $plan->type = 'MONTH';
    $plan->amount = 15;
    $plan->save();
    return $response;
  }



  public function createPlanYear()
  {
      if(PaypalProduct::count() > 0)
      {
        $prod  = PaypalProduct::first()->product_id;    
      }
      else{
        $this->createProduct();
        $prod  = PaypalProduct::first()->product_id;    
      }
    $request_Paypal = md5(uniqid());
   // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n    \"name\": \"Premium Course Plus\",\n    \"description\": \"A premium plan with courses feature\",\n    \"product_id\": \"$prod\",\n    \"billing_cycles\": [{\n        \"frequency\": {\n            \"interval_unit\": \"YEAR\",\n            \"interval_count\": 1\n        },\n        \"tenure_type\": \"REGULAR\",\n        \"sequence\": 1,\n        \"total_cycles\": 0,\n        \"pricing_scheme\": {\n            \"fixed_price\": {\n                \"value\": \"39\",\n                \"currency_code\": \"USD\"\n            }\n        }\n    }],\n    \"payment_preferences\": {\n        \"auto_bill_outstanding\": true,\n        \"payment_failure_threshold\": 1\n    }\n  }");

    $headers = array();
    $headers[] = 'Accept: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Paypal-Request-Id: PLAN-'.$request_Paypal;
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    $response = json_decode($result);
    $plan = new Plan();
    $plan->plan_id = $response->id;
    $plan->product_id = $response->product_id;
    $plan->name = $response->name;
    $plan->status = $response->status;
    $plan->description = $response->description;
    $plan->usage_type = $response->usage_type;
    $plan->type = 'YEAR';
    $plan->amount = 39;
    $plan->save();
    return $response;
  }

  public function listPlan()
  {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $products  = PaypalProduct::latest()->take(1)->get();    
        $prod = '';
        foreach($products as $product)
          $prod = $product->product_id;
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans?product_id='.$prod.'&page_size=2&page=1&total_required=true');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    $response = json_decode($result);
    return $response;
  }

  public function showPlan($plan_id)
  {
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$plan_id);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    $response = json_decode($result);
    return $response;
  }

  public function activePlan($plan_id)
  {
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$plan_id.'/activate');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);

    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    return $result;
  }

  public function deactivePlan($plan_id)
  {
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$plan_id.'/deactivate');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);

    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
    return $result;
  }

  public function updatePricing($plan_id)
  {
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/plans/'.$plan_id.'/update-pricing-schemes');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"pricing_schemes\": [\n    {\n      \"billing_cycle_sequence\": 1,\n      \"pricing_scheme\": {\n        \"fixed_price\": {\n          \"value\": \"50\",\n          \"currency_code\": \"USD\"\n        },\n        \"roll_out_strategy\": {\n          \"effective_time\": \"2019-02-10T21:20:49Z\",\n          \"process_change_from\": \"NEXT_PAYMENT\"\n        }\n      }\n    },\n    {\n      \"billing_cycle_sequence\": 2,\n      \"pricing_scheme\": {\n        \"fixed_price\": {\n          \"value\": \"100\",\n          \"currency_code\": \"USD\"\n        },\n        \"pricing_model\": \"VOLUME\",\n        \"tiers\": [\n          {\n            \"starting_quantity\": \"1\",\n            \"ending_quantity\": \"1000\",\n            \"amount\": {\n              \"value\": \"150\",\n              \"currency_code\": \"USD\"\n            }\n          },\n          {\n            \"starting_quantity\": \"1001\",\n            \"amount\": {\n              \"value\": \"250\",\n              \"currency_code\": \"USD\"\n            }\n          }\n        ],\n        \"roll_out_strategy\": {\n          \"effective_time\": \"2019-02-10T21:20:49Z\",\n          \"process_change_from\": \"NEXT_PAYMENT\"\n        }\n      }\n    }\n  ]\n}");

$headers = array();
$headers[] = 'Content-Type: application/json';
$headers[] = 'Authorization: '.$this->tokenAccess();
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  $result = curl_exec($ch);
  if (curl_errno($ch)) {
      echo 'Error:' . curl_error($ch);
  }
  curl_close($ch);
  $response = json_decode($result);
  
}

  public function subscribeMonth($plan_id)
  {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"plan_id\": \"P-5ML4271244454362WXNWU5NQ\",\n  \"start_time\": \"2018-11-01T00:00:00Z\",\n  \"quantity\": \"20\",\n  \"shipping_amount\": {\n    \"currency_code\": \"USD\",\n    \"value\": \"10.00\"\n  },\n  \"subscriber\": {\n    \"name\": {\n      \"given_name\": \"John\",\n      \"surname\": \"Doe\"\n    },\n    \"email_address\": \"customer@example.com\",\n    \"shipping_address\": {\n      \"name\": {\n        \"full_name\": \"John Doe\"\n      },\n      \"address\": {\n        \"address_line_1\": \"2211 N First Street\",\n        \"address_line_2\": \"Building 17\",\n        \"admin_area_2\": \"San Jose\",\n        \"admin_area_1\": \"CA\",\n        \"postal_code\": \"95131\",\n        \"country_code\": \"US\"\n      }\n    }\n  },\n  \"application_context\": {\n    \"brand_name\": \"walmart\",\n    \"locale\": \"en-US\",\n    \"shipping_preference\": \"SET_PROVIDED_ADDRESS\",\n    \"user_action\": \"SUBSCRIBE_NOW\",\n    \"payment_method\": {\n      \"payer_selected\": \"PAYPAL\",\n      \"payee_preferred\": \"IMMEDIATE_PAYMENT_REQUIRED\"\n    },\n    \"return_url\": \"https://example.com/returnUrl\",\n    \"cancel_url\": \"https://example.com/cancelUrl\"\n  }\n}");

    $headers = array();
    $headers[] = 'Content-Type: application/json';
    $headers[] = 'Authorization: Bearer <Access-Token>';
    $headers[] = 'Paypal-Request-Id: SUBSCRIPTION-21092019-001';
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    curl_close($ch);
  }
    public function subscription()
    {      
      if(Plan::where('type','=','MONTH')->count() > 0){
        $plan1 = Plan::where('type','=','MONTH')->firstOrFail();
        $plan_id1 = $plan1->plan_id;
      }
        else{
          $this->createPlanMonth()->id;
          $plan1 = Plan::where('type','=','MONTH')->first();
          $plan_id1 = $plan1->plan_id;
        }

        if( Plan::where('type','=','YEAR')->first())
        {
          $plan2 = Plan::where('type','=','YEAR')->first();
          $plan_id2 = $plan2->plan_id;
        }
        else{
            $this->createPlanYear()->id;
            $plan2 = Plan::where('type','=','YEAR')->first();
            $plan_id2 = $plan2->plan_id;
        }
        $questions = FrequentlyQuestion::latest()->take(6)->get();
      return view('courses.pricing',compact('plan_id1','plan_id2','questions'));
    }

    public function monthly($id)
    {
      if(empty(auth()->user()->first_name) || empty(auth()->user()->last_name) || empty(auth()->user()->address1)){
        return redirect()->route('dashboard')->with('message','Please complete your personnal information before souscription!!');
      }

      $plan = Plan::where('plan_id','=',$id)->first();      
      if($plan->status == 'ACTIVE')
         return view('courses.course-checkout',compact('plan'));
      else
        return view('courses.404');
    }

    public function checkout(Request $request)
    {
      if(!empty($request->paypalEmail) && !empty($request->user) && !empty($request->plan))
      {
        $request_Paypal = md5(uniqid());
        $user = Auth::user();
        $plan = Plan::findOrFail($request->plan);
        $paypalEmail = $request->paypalEmail;   
        
        $request->session()->put('plan_id',$plan->plan_id);
        $date = now()->addDay(1)->format('Y-m-d').'T00:00:00Z';

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"plan_id\": \"$plan->plan_id\",\n  \"start_time\": \"$date\",\n  \"quantity\": \"1\",\n  \"shipping_amount\": {\n    \"currency_code\": \"USD\",\n    \"value\": \"$plan->amount\"\n  },\n  \"subscriber\": {\n    \"name\": {\n      \"given_name\": \"$user->first_name\",\n      \"surname\": \"$user->name\"\n    },\n    \"email_address\": \"$paypalEmail\",\n    \"shipping_address\": {\n      \"name\": {\n        \"full_name\": \"$user->first_name $user->last_name\"\n      },\n      \"address\": {\n        \"address_line_1\": \"$user->address1\",\n        \"address_line_2\": \"$user->address2\",\n        \"admin_area_2\": \"San Jose\",\n        \"admin_area_1\": \"CA\",\n        \"postal_code\": \"$user->zip\",\n        \"country_code\": \"$user->country\"\n      }\n    }\n  },\n  \"application_context\": {\n    \"brand_name\": \"Geeks\",\n    \"locale\": \"en-US\",\n    \"shipping_preference\": \"SET_PROVIDED_ADDRESS\",\n    \"user_action\": \"SUBSCRIBE_NOW\",\n    \"payment_method\": {\n      \"payer_selected\": \"PAYPAL\",\n      \"payee_preferred\": \"IMMEDIATE_PAYMENT_REQUIRED\"\n    },\n    \"return_url\": \"http://geeks.test/status-sub\",\n    \"cancel_url\": \"http://geeks.test\"\n  }\n}");

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
        $headers[] = 'Paypal-Request-Id: SUBSCRIPTION-'.$request_Paypal;
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        
        curl_close($ch);
        $response = json_decode($result);
        
        if($response && ($response->status == 'APPROVAL_PENDING'))
        {          
          return redirect($response->links[0]->href);
        }
      }
      else{
        return redirect()->back();
      }
    }

    public function paymentStatus(Request $request)
    {      
      $subscription_id = $request->subscription_id;
      $ba_token = $request->ba_token;
      $token = $request->token;
      $plan_id = Session::get('plan_id');
      

      $subscription = new Subscription();
      $subscription->subscription_id = $subscription_id;
      $subscription->ba_token = $ba_token;
      $subscription->token = $token;
      $subscription->course_id = 1;
      $subscription->user_id = auth()->user()->id;
      $subscription->plan_id = $plan_id;
      $subscription->type = 'APPROVAL_PENDING';      
       $subscription->save();
      Session::forget('plan_id');
      $details = $this->showSubscription($subscription->subscription_id);      
      
      if($details->status == 'ACTIVE')
      {
        
          // dd(\App\Http\Controllers\SubscriptionController::tokenAccess());
          $user = User::findOrFail(auth()->user()->id);
          $user->is_subscribed = 1;
          $user->subscription_id = $details->id;
          $user->save();
          $mail = new YahooMail();
          $mail->author_id = User::where('email','mashashie@yahoo.com')->first()->id;
          $mail->email_to = auth()->user()->id;
          $mail->subject = 'Notifications';
          $mail->body = 'Hello Dear <b>'.auth()->user()->pseudo.' your payment is active for 30 days </b> <b> Please consult your paypal Account Or contact mashashie@yahoo.com for any problems</b>';
          $mail->save();
      }
      return redirect()->route('dashboard');
    }

    public function showSubscription($id)
    {
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$id);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.SubscriptionController::tokenAccess();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        $response = json_decode($result);
        return $response;
    }

    public function activateSubscription($id)
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$id.'/activate');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"reason\": \"Reactivating the subscription\"\n}");

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        $response = json_decode($result);
        return $response;
    }

    public function suspendSubscription($id)
    {
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
      $ch = curl_init();

      curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/billing/subscriptions/'.$id);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"reason\": \"Item out of stock\"\n}");

      $headers = array();
      $headers[] = 'Content-Type: application/json';
      $headers[] = 'Authorization: Bearer '.$this->tokenAccess();
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

      $result = curl_exec($ch);
      if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
      }
      curl_close($ch);
      $response = json_decode($result);
      return $response;
    }

    // public function instructorPayout($course_id,$user,$amount)
    public function instructorPayout($course_id,$amount)
    {      
      $course =  Course::find($course_id);
      
      $instructor = \App\Models\Instructor::where('instructor_id',$course->user->id)->first()->paypal_email;
      
      
      // $number = 692213148;
      // $course->user->email;
      // $user;
      $price = $amount * 20 / 100;      
      $ch = curl_init();

      curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/payments/payouts');
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"sender_batch_header\": {\n    \"sender_batch_id\": \"Payouts_".date('Y')."_1000".rand(10,99)."\",\n    \"email_subject\": \"You have a payout!\",\n    \"email_message\": \"You have received a payout! Thanks for using our service!\"\n  },\n  \"items\": [\n    {\n      \"recipient_type\": \"EMAIL\",\n      \"amount\": {\n        \"value\": \"$price\",\n        \"currency\": \"USD\"\n      },\n      \"note\": \"Thanks for your patronage!\",\n      \"sender_item_id\": \"D4HZGK57CRL4Q\",\n      \"receiver\": \"$instructor\",\n      \"alternate_notification_method\": {\n        \"phone\": {\n          \"country_code\": \"237\",\n          \"national_number\": \"692213148\"\n        }\n      },\n      \"notification_language\": \"fr-FR\"\n    }\n  ]\n}");
      
      $headers = array();
      $headers[] = 'Content-Type: application/json';
      $headers[] = 'Authorization: Bearer '.SubscriptionController::tokenAccess();
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
      
      $result = curl_exec($ch);
      if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
      }
      curl_close($ch);
      $response = json_decode($result);
      
      if($response->batch_header->batch_status == 'PENDING')
      {
        $paymentId = $response->batch_header->payout_batch_id;
        // SubscriptionController::instructorPaymentStatus($paymentId);
        $payment = new InstructorPayout();
        $payment->user_id = $course->user->id;
        $payment->course_id = $course_id;
        $payment->amount = $price;
        $payment->payment_id = $paymentId;
        $payment->method = 'Paypal';
        $payment->save();        
      }

      // montant
      //status
      //course
      //user take
      //payment processor
      //paymentId
    }
    public function adminPayout($course_id,$amount,$user)
    {      
      $course =  Course::findOrFail($course_id);
      
      if(\App\Models\Admin::where('admin_id',$user)->count() > 0){
        $instructor = \App\Models\Admin::where('admin_id',$user)->first()->paypal_email;
      }
      else{
        $instructor = 'mashashie@yahoo.com';
      }
      
      
      // $number = 692213148;
      // $course->user->email;
      // $user;
      
      $price = ($amount * 10 / 100);      
      $ch = curl_init();

      curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/payments/payouts');
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"sender_batch_header\": {\n    \"sender_batch_id\": \"Payouts_".date('Y')."_1000".rand(10,99)."\",\n    \"email_subject\": \"You have a payout!\",\n    \"email_message\": \"You have received a payout! Thanks for using our service!\"\n  },\n  \"items\": [\n    {\n      \"recipient_type\": \"EMAIL\",\n      \"amount\": {\n        \"value\": \"$price\",\n        \"currency\": \"USD\"\n      },\n      \"note\": \"Thanks for your patronage!\",\n      \"sender_item_id\": \"D4HZGK57CRL4Q\",\n      \"receiver\": \"$instructor\",\n      \"alternate_notification_method\": {\n        \"phone\": {\n          \"country_code\": \"237\",\n          \"national_number\": \"692213148\"\n        }\n      },\n      \"notification_language\": \"fr-FR\"\n    }\n  ]\n}");
      
      $headers = array();
      $headers[] = 'Content-Type: application/json';
      $headers[] = 'Authorization: Bearer '.SubscriptionController::tokenAccess();
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
      
      $result = curl_exec($ch);
      if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
      }
      curl_close($ch);
      $response = json_decode($result);
      
      if($response->batch_header->batch_status == 'PENDING')
      {
        $paymentId = $response->batch_header->payout_batch_id;
        // SubscriptionController::instructorPaymentStatus($paymentId);
        $payment = new AdminPayout();
        $payment->user_id = $user;
        $payment->course_id = $course_id;
        $payment->amount = $price;
        $payment->payment_id = $paymentId;
        $payment->method = 'Paypal';
        $payment->save();        

        $mail = new YahooMail();
        $mail->author_id = User::where('email','mashashie@yahoo.com')->first()->id;
        $mail->email_to = auth()->user()->id;
        $mail->subject = 'Notifications';
        $mail->body = 'Hello Dear <b>'.\App\Models\User::find(auth()->user()->id)->first()->name.'</b> You have a Success payment for course <b>'.Course::find($course_id)->title.'</b> you are take 10% of price <b> rwite mashashie@yahoo.com for any problems </b>';
        $mail->save();
      }

      // montant
      //status
      //course
      //user take
      //payment processor
      //paymentId
    }

    public function instructorPaymentStatus($id)
    {
      // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
      $ch = curl_init();

      curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/payments/payouts/'.$id);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');


      $headers = array();
      $headers[] = 'Content-Type: application/json';
      $headers[] = 'Authorization: '.SubscriptionController::tokenAccess();
      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

      $result = curl_exec($ch);
      if (curl_errno($ch)) {
          echo 'Error:' . curl_error($ch);
      }
      curl_close($ch);
      $response = json_decode($result);
      dd($response);
    }

    public function form_payout(User $user, Request $request)
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        
        //mon id paypal D4HZGK57CRL4Q
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://api-m.sandbox.paypal.com/v1/payments/payouts');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n  \"sender_batch_header\": {\n    \"sender_batch_id\": \"Payouts_".date('Y')."_100007\",\n    \"email_subject\": \"You have a payout!\",\n    \"email_message\": \"You have received a payout! Thanks for using our service!\"\n  },\n  \"items\": [\n    {\n      \"recipient_type\": \"EMAIL\",\n      \"amount\": {\n        \"value\": \"$request->amount\",\n        \"currency\": \"USD\"\n      },\n      \"note\": \"Thanks for your patronage!\",\n      \"sender_item_id\": \"D4HZGK57CRL4Q\",\n      \"receiver\": \"$request->email\",\n      \"alternate_notification_method\": {\n        \"phone\": {\n          \"country_code\": \"91\",\n          \"national_number\": \"9999988888\"\n        }\n      },\n      \"notification_language\": \"fr-FR\"\n    }\n  ]\n}");
        
        $headers = array();
        $headers[] = 'Content-Type: application/json';
        $headers[] = 'Authorization: Bearer '.SubscriptionController::tokenAccess();
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);
        $response = json_decode($result);
        dd($response);

        // montant
        //status
        //course
        //user take
        //payment processor
        //paymentId
    }
    
    
}
